name: DynamicNFTs prod pipe

on:
    push:
        branches:
          - "master"

env:
    ENVIRONMENT: prod
    PROJECT_NAME: dynamic-nfts
    IPFS_IMAGE_TAG: ${{ github.ref_name }}
    AWS_REGION: eu-west-3

jobs:
    deploy-infra:
        runs-on: ubuntu-22.04

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  ref: ${{ github.ref_name }}
                  path: dynamic-nfts

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1-node16
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - uses: hashicorp/setup-terraform@v2
              with:
                  terraform_version: 1.2.2

            - name: Terraform Init
              run: |
                  terraform -chdir=dynamic-nfts/.deployment init -backend-config="key=${{ env.PROJECT_NAME }}/prod"

            - name: Terraform apply
              env:
                TF_VAR_project_name: ${{ env.PROJECT_NAME }}
                TF_VAR_environment: ${{ env.ENVIRONMENT }}
              run: terraform -chdir=dynamic-nfts/.deployment apply -var-file="variables.tfvars" -auto-approve

            - name: Recover Terraform outputs
              run: | 
                terraform -chdir=dynamic-nfts/.deployment output aws_ecr_repository-ipfs-name | grep -o '".*"' | sed 's/"//g' | head -n 1 > aws_ecr_repository-ipfs-name 
                terraform -chdir=dynamic-nfts/.deployment output aws_ecr_repository-frontend-name | grep -o '".*"' | sed 's/"//g' | head -n 1 > aws_ecr_repository-frontend-name
                terraform -chdir=dynamic-nfts/.deployment output aws_ecs_task_definition-frontend-name | grep -o '".*"' | sed 's/"//g' | head -n 1 > aws_ecs_task_definition-frontend-name
                terraform -chdir=dynamic-nfts/.deployment output aws_ecs_task_definition-ipfs-name | grep -o '".*"' | sed 's/"//g' | head -n 1 > aws_ecs_task_definition-ipfs-name
                terraform -chdir=dynamic-nfts/.deployment output aws_ecs_service-ipfs-name | grep -o '".*"' | sed 's/"//g' | head -n 1 > aws_ecs_service-ipfs-name
                terraform -chdir=dynamic-nfts/.deployment output aws_ecs_cluster-main-name | grep -o '".*"' | sed 's/"//g' | head -n 1 > aws_ecs_service-frontend-name
                terraform -chdir=dynamic-nfts/.deployment output aws_ecs_cluster-main-name | grep -o '".*"' | sed 's/"//g' | head -n 1 > aws_ecs_cluster-main-name

            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                name: aws_ecr_repository-ipfs-name
                path: aws_ecr_repository-ipfs-name

            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                name: aws_ecr_repository-frontend-name
                path: aws_ecr_repository-frontend-name

            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                name: aws_ecs_task_definition-ipfs-name
                path: aws_ecs_task_definition-ipfs-name

            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                name: aws_ecs_task_definition-frontend-name
                path: aws_ecs_task_definition-frontend-name

            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                name: aws_ecs_service-ipfs-name
                path: aws_ecs_service-ipfs-name

            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                name: aws_ecs_service-frontend-name
                path: aws_ecs_service-frontend-name

            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                name: aws_ecs_cluster-main-name
                path: aws_ecs_cluster-main-name

    build-ipfs:
        runs-on: ubuntu-22.04
        needs: deploy-infra

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  ref: ${{ github.ref_name }}
                  path: ${{ env.PROJECT_NAME }}

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1-node16
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
            
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Download artifact
              uses: actions/download-artifact@v3
              with:
                name: aws_ecr_repository-ipfs-name
                path: /tmp/aws_ecr_repository-ipfs-name

            - name: Build docker image
              run: |
                cd ${{ env.PROJECT_NAME }}/ipfs
                docker build -t ${{ steps.login-ecr.outputs.registry }}/$(cat /tmp/aws_ecr_repository-ipfs-name/aws_ecr_repository-ipfs-name):${{ env.IPFS_IMAGE_TAG }} .    

            - name: Tag docker image
              run: |
                docker tag ${{ steps.login-ecr.outputs.registry }}/$(cat /tmp/aws_ecr_repository-ipfs-name/aws_ecr_repository-ipfs-name):${{ env.IPFS_IMAGE_TAG }} ${{ steps.login-ecr.outputs.registry }}/$(cat /tmp/aws_ecr_repository-ipfs-name/aws_ecr_repository-ipfs-name):latest

            - name: Push docker image
              run: |
                docker push ${{ steps.login-ecr.outputs.registry }}/$(cat /tmp/aws_ecr_repository-ipfs-name/aws_ecr_repository-ipfs-name):${{ env.IPFS_IMAGE_TAG }}
                docker push ${{ steps.login-ecr.outputs.registry }}/$(cat /tmp/aws_ecr_repository-ipfs-name/aws_ecr_repository-ipfs-name):latest
              
    deploy-ipfs:
        runs-on: ubuntu-22.04
        needs: build-ipfs

        steps:
          - name: Download artifact
            uses: actions/download-artifact@v3
            with:
              name: aws_ecs_task_definition-ipfs-name
              path: /tmp/aws_ecs_task_definition-ipfs-name

          - name: Download artifact
            uses: actions/download-artifact@v3
            with:
              name: aws_ecr_repository-ipfs-name
              path: /tmp/aws_ecr_repository-ipfs-name

          - name: Download artifact
            uses: actions/download-artifact@v3
            with:
              name: aws_ecs_service-ipfs-name
              path: /tmp/aws_ecs_service-ipfs-name

          - name: Download artifact
            uses: actions/download-artifact@v3
            with:
              name: aws_ecs_cluster-main-name
              path: /tmp/aws_ecs_cluster-main-name


          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1-node16
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ env.AWS_REGION }}

          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1              

          - name: Download task definition
            run: |
              aws ecs describe-task-definition --task-definition $(cat /tmp/aws_ecs_task_definition-ipfs-name/aws_ecs_task_definition-ipfs-name) --query taskDefinition > task-definition.json
            shell: bash

          - name: Replace image tag in task definition
            id: fillin-task-definition
            uses: aws-actions/amazon-ecs-render-task-definition@v1
            with:
              task-definition: task-definition.json
              container-name: $(cat /tmp/aws_ecs_task_definition-ipfs-name/aws_ecs_task_definition-ipfs-name)
              image: ${{ steps.login-ecr.outputs.registry }}/$(cat /tmp/aws_ecr_repository-ipfs-name/aws_ecr_repository-ipfs-name):${{ env.IPFS_IMAGE_TAG }}

          - name: Deploying task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ steps.fillin-task-definition.outputs.task-definition }}
              service: $(cat /tmp/aws_ecs_service-ipfs-name)
              cluster: $(cat /tmp/aws_ecs_cluster-main-name)
              wait-for-service-stability: true
